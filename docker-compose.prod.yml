version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        - NODE_ENV=production
    ports:
      - "${APP_PORT:-3000}:${APP_INTERNAL_PORT:-3000}"
    environment:
      - NODE_ENV=production
      - PORT=${APP_INTERNAL_PORT:-3000}
      - CLIENT_URL=${CLIENT_URL:-http://localhost:3000}
      - MONGODB_URI=mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD}@mongo:${MONGO_INTERNAL_PORT:-27017}/${MONGO_DATABASE:-gpt-collab-prod}?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:${REDIS_INTERNAL_PORT:-6379}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=7d
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RAPID_API_HOST=${RAPID_API_HOST:-judge0-ce.p.rapidapi.com}
      - RAPID_API_KEY=${RAPID_API_KEY}
      - RAPID_API_URL=${RAPID_API_URL:-https://judge0-ce.p.rapidapi.com/submissions}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-1000}
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:${APP_INTERNAL_PORT:-3000}/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB database
  mongo:
    image: mongo:6
    ports:
      - "${MONGO_PORT:-27017}:${MONGO_INTERNAL_PORT:-27017}"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE:-gpt-collab-prod}
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
      - ./scripts/mongo-init-prod.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    command: ["mongod", "--auth", "--bind_ip_all", "--port", "${MONGO_INTERNAL_PORT:-27017}"]
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "mongosh", "--port", "${MONGO_INTERNAL_PORT:-27017}", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:${REDIS_INTERNAL_PORT:-6379}"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: ["redis-server", "--port", "${REDIS_INTERNAL_PORT:-6379}", "--requirepass", "${REDIS_PASSWORD}", "--appendonly", "yes"]
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "${REDIS_INTERNAL_PORT:-6379}", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  # Nginx reverse proxy (port 80 only)
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx-ssl.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # MongoDB backup service
  mongo-backup:
    image: mongo:6
    environment:
      - MONGO_URI=mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD}@mongo:${MONGO_INTERNAL_PORT:-27017}/${MONGO_DATABASE:-gpt-collab-prod}?authSource=admin
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
    volumes:
      - backup_data:/backup
      - ./scripts/backup.sh:/backup.sh:ro
    command: ["sh", "-c", "chmod +x /backup.sh && echo '${BACKUP_SCHEDULE:-0 2 * * *} /backup.sh' | crontab - && crond -f"]
    depends_on:
      - mongo
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - backup

  # Log aggregation
  fluentd:
    image: fluent/fluentd:v1.16-1
    ports:
      - "${FLUENTD_PORT:-24224}:24224"
    volumes:
      - app_logs:/fluentd/log/app:ro
      - nginx_logs:/fluentd/log/nginx:ro
      - ./config/fluentd.conf:/fluentd/etc/fluent.conf:ro
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - logging

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.listen-address=0.0.0.0:9090'
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_HTTP_PORT=3000
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - monitoring

volumes:
  app_data:
    driver: local
  app_logs:
    driver: local
  mongo_data:
    driver: local
  mongo_config:
    driver: local
  redis_data:
    driver: local
  backup_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16