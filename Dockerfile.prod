# Multi-stage Production Dockerfile
FROM node:18-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    git \
    python3 \
    make \
    g++ \
    cairo-dev \
    jpeg-dev \
    pango-dev \
    musl-dev \
    giflib-dev \
    pixman-dev \
    pangomm-dev \
    libjpeg-turbo-dev \
    freetype-dev

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY client/package*.json ./client/
COPY server/package*.json ./server/

# Stage 1: Install dependencies
FROM base AS dependencies

# Install all dependencies (including devDependencies for building)
RUN npm ci --silent
WORKDIR /app/client
RUN npm ci --silent
WORKDIR /app/server  
RUN npm ci --silent
WORKDIR /app

# Stage 2: Build frontend
FROM dependencies AS frontend-build

# Copy frontend source
COPY client/ ./client/
COPY client/tsconfig.json ./
COPY client/vite.config.ts ./

# Build frontend
WORKDIR /app/client
RUN npm run build

# Stage 3: Prepare backend
FROM dependencies AS backend-build

# Copy backend source
COPY server/ ./server/
COPY .env* ./

# If you have backend TypeScript, build it
# WORKDIR /app/server
# RUN npm run build

# Stage 4: Production image
FROM node:18-alpine AS production

# Install only runtime dependencies
RUN apk add --no-cache \
    dumb-init \
    cairo \
    jpeg \
    pango \
    musl \
    giflib \
    pixman \
    pangomm \
    libjpeg-turbo \
    freetype

# Create app user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY server/package*.json ./server/

# Install only production dependencies
RUN npm ci --only=production --silent && npm cache clean --force
WORKDIR /app/server
RUN npm ci --only=production --silent && npm cache clean --force
WORKDIR /app

# Copy built frontend from frontend-build stage
COPY --from=frontend-build --chown=nextjs:nodejs /app/client/dist ./client/dist

# Copy backend source and built files
COPY --from=backend-build --chown=nextjs:nodejs /app/server ./server
COPY --from=backend-build --chown=nextjs:nodejs /app/.env* ./

# Copy root level files needed for production
COPY --chown=nextjs:nodejs package*.json ./

# Create necessary directories
RUN mkdir -p /app/server/uploads /app/logs && \
    chown -R nextjs:nodejs /app/server/uploads /app/logs

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "server/index.js"]