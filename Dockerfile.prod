# Multi-stage build for production
FROM node:18-alpine AS base

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    dumb-init \
    && addgroup -g 1001 -S nodejs \
    && adduser -S nodejs -u 1001

# Copy package files
COPY package*.json ./
COPY client/package*.json ./client/

# Install dependencies with production optimizations
RUN npm ci --only=production --silent \
    && cd client \
    && npm ci --only=production --silent \
    && npm cache clean --force

# Build stage for client
FROM node:18-alpine AS client-builder

WORKDIR /app/client

# Copy client package files
COPY client/package*.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci --silent

# Copy client source code
COPY client/ ./

# Build client for production
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs \
    && adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production --silent \
    && npm cache clean --force

# Copy server source code
COPY server/ ./server/

# Copy built client from builder stage
COPY --from=client-builder /app/client/dist ./client/dist

# Create necessary directories and set permissions
RUN mkdir -p data/uploads temp logs \
    && chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD node -e " \
        const http = require('http'); \
        const options = { \
            host: 'localhost', \
            port: process.env.PORT || 3000, \
            path: '/api/health', \
            timeout: 2000 \
        }; \
        const request = http.request(options, (res) => { \
            console.log('Health check status:', res.statusCode); \
            process.exit(res.statusCode === 200 ? 0 : 1); \
        }); \
        request.on('error', () => process.exit(1)); \
        request.end();"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "server/index.js"]